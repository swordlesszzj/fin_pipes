    for (size_t i = 0; i < restraints.size(); ++i) {
        const auto& r = restraints[i];
        for (size_t j = 0; j < r.dofs.size(); ++j) {
            const auto& dof = r.dofs[j];
            if (dof.type == 0) continue;

            // 定义DOF类型到索引的映射
            int dof_index = 0;
            switch (dof.type) {
            case 1: dof_index = 6; break;
            case 2: dof_index = 5; break;
            case 3: dof_index = 4; break;
            case 10: dof_index = 3; break;
            case 11: dof_index = 2; break;
            case 12: dof_index = 1; break;
            default: throw std::runtime_error("nonlinear restraint");
            }

            int row_idx = number[dof.node] * 6 - dof_index;

            // 添加对角线项
            StiffnessMatrix(row_idx, row_idx) += dof.stiffness;

            // 如果有连接节点，添加耦合项
            if (dof.connecting_node != 0) {
                int col_idx = number[dof.connecting_node] * 6 - dof_index;

                StiffnessMatrix(col_idx, col_idx) += dof.stiffness;

                // 添加反对角线项（负值）
                StiffnessMatrix(row_idx, col_idx) -= dof.stiffness;
                StiffnessMatrix(col_idx, row_idx) -= dof.stiffness;

            }
        }
    }